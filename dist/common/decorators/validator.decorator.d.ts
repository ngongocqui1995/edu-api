import * as ClassValidator from 'class-validator';
import * as ValidatorJS from 'validator';
export declare function IsNumberString(options?: ValidatorJS.IsNumericOptions, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsExist(entity: any, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsExists(entity: any, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function Min(minValue: number, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsNumber(options?: ClassValidator.IsNumberOptions, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsPassword(validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsEmail(options?: ValidatorJS.IsEmailOptions, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsString(validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsEnum(entity: any, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function IsNotEmpty(validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
export declare function Length(min: number, max: number, validationOptions?: ClassValidator.ValidationOptions): (object: Object, propertyName: string) => void;
